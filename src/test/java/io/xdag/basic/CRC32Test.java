package io.xdag.basic;

import io.xdag.crypto.Sha256Hash;
import io.xdag.utils.BytesUtils;
import org.junit.Test;
import org.spongycastle.util.Arrays;
import org.spongycastle.util.encoders.Hex;


import static io.xdag.utils.BasicUtils.crc32Verify;

/**
 * @ClassName CRC32Test
 * @Description
 * @Author punk
 * @Date 2020/5/13 23:32
 * @Version V1.0
 **/
public class CRC32Test {

    @Test
    public void TestCrc(){
        //278b7f95
//        String reque = "8b010002278b7f95200000000000000000000000000000000000000000000100" +
//                "8ec4205108aba99b000000000000000000000000000000000000000000000000" +
//                "204a5dc8bbf9727f3e03000000000000204a5dc8bbf9727f3e03000000000000" +
//                "6400000000000000640000000000000032000000000000003200000000000000" +
//                "04000000040000003ef47801000000007f000001611e7f000001b8227f000001" +
//                "5f767f000001d49d000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000" +
//                "0000000000000000000000000000000000000000000000000000000000000000";


        String reque = "8b050002a353147e3853050000000040ffffc63c7b0100000000000000000000" +
                "c44704e82cf458076643a426a6d35cdb6ff1c168866f00e40000000000000000" +
                "c44704e82cf458076643a426a6d35cdb6ff1c168866f00e40000000000000000" +
                "a31e6283a9f5da4a4f56c3503f3ab27c776fbb2f89f67e20cd875ac0523fe613" +
                "08e2eda6e9eb9b754d96128a5676b52e6cc9f2a2e102e9896fea58864c489c6b" +
                "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000097d1511ec1723d118fe19c06ab4ca825a982282a1733b508b6b56f73cc4adeb";


        byte[] uncryptData = Hex.decode(reque);
        int crc = BytesUtils.bytesToInt(uncryptData,4,true);
//        System.out.println(Integer.toHexString(crc));
        System.arraycopy(BytesUtils.longToBytes(0,true),0,uncryptData,4,4);
//        System.out.println(Hex.toHexString(uncryptData));

//        System.out.println(crc32Verify(uncryptData,crc));
        assert(crc32Verify(uncryptData,crc));


        System.out.println(Hex.toHexString(Arrays.reverse(Sha256Hash.hashTwice(Hex.decode(reque)))));
    }
}
